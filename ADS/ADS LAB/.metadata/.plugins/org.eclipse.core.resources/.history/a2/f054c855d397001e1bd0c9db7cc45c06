package core;

public class StackOperation {

	private static class Node {
		private int data;
		private Node next;

		public Node(int data) {
			super();
			this.data = data;
			this.next = null;
		}

	}

	private Node head;

	public void displayStack() {
		if (head == null)
			throw new RuntimeException("Stack is empty...");
		else {
			Node trav = head;
			while (trav != null) {
				System.out.println(trav.data);
				trav = trav.next;
			}
		}
	}

	// Add last
	public void push(int nextInt) {
		Node pushElement = new Node(nextInt);
		if (head == null)
			head = pushElement;
		else if (head.next == null) {
			head.next = pushElement;
		} else {
			Node trav = head;
			while (trav.next != null)
				trav = trav.next;
			trav.next = pushElement;
		}

	}

	// Remove first
	public void pop() {
		if (head == null)
			throw new RuntimeException("Stack is empty");
		else if (head.next == null)
			head = null;
		else {
			head.next = head.next.next;
		}
	}

	// Show first
	public void top() {
		// TODO Auto-generated method stub
		if(head == null)
			throw new RuntimeException("Stack is empty..");
		else{
			System.out.println(head.data);
		}
	}

	// last + 1
	public int getMax() {
		if(head == null)
			throw new RuntimeException("Stack is empty...");
		else {
			int count =0;
			Node trav = head;
			while(trav!=null)
			{
				trav = trav.next;
				
			}
			
		}

	}

}
